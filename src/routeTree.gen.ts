/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LandingIndexRouteImport } from './routes/landing/index'
import { Route as ProjectNameIndexRouteImport } from './routes/$projectName/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingIndexRoute = LandingIndexRouteImport.update({
  id: '/landing/',
  path: '/landing/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectNameIndexRoute = ProjectNameIndexRouteImport.update({
  id: '/$projectName/',
  path: '/$projectName/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$projectName': typeof ProjectNameIndexRoute
  '/landing': typeof LandingIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$projectName': typeof ProjectNameIndexRoute
  '/landing': typeof LandingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$projectName/': typeof ProjectNameIndexRoute
  '/landing/': typeof LandingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$projectName' | '/landing'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$projectName' | '/landing'
  id: '__root__' | '/' | '/$projectName/' | '/landing/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectNameIndexRoute: typeof ProjectNameIndexRoute
  LandingIndexRoute: typeof LandingIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/landing/': {
      id: '/landing/'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$projectName/': {
      id: '/$projectName/'
      path: '/$projectName'
      fullPath: '/$projectName'
      preLoaderRoute: typeof ProjectNameIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectNameIndexRoute: ProjectNameIndexRoute,
  LandingIndexRoute: LandingIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
